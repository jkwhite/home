alias sz='source ~/.zshrc'

export PATH=~/bin:$PATH

setopt auto_cd
setopt auto_pushd
setopt pushd_silent
setopt hist_ignore_dups
#
# .zshrc is sourced in interactive shells.
# It should contain commands to set up aliases,
# functions, options, key bindings, etc.
#

autoload -U compinit
compinit

#allow tab completion in the middle of a word
setopt COMPLETE_IN_WORD

## keep background processes at full speed
#setopt NOBGNICE
## restart running processes on exit
#setopt HUP

## history
#setopt APPEND_HISTORY
## for sharing history between zsh processes
#setopt INC_APPEND_HISTORY
#setopt SHARE_HISTORY

## never ever beep ever
setopt NO_BEEP

## automatically decide when to page a list of completions
#LISTMAX=0

## disable mail checking
MAILCHECK=0

# autoload -U colors
#colors

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# zsh options
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt appendhistory autocd extendedglob autolist autopushd completeinword pushdignoredups pushdsilent incappendhistory histnostore histignoredups

# term hack
[ "$SSH_TTY" ] && stty erase 

# aliases

alias | grep -q which || unalias which # global rc aliases to /bin/which which doesn't understand zsh functions
alias l='ls -l'
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ssh='ssh -2'
alias scp='scp -2'
alias tma="tmux attach -t 0"
alias sxr="screen -x -R"
alias lynx=links
alias grep='grep --color'

PROMPT="%B%m-%n-%D{%u%H%M}-%!%#%b "
RPROMPT='%5~'

export GREP_COLOR="1;32"

alias sz="source ~/.zshrc"

function cwp() {
    local package
    for spath in $ZSH_SOURCEPATH
    do
        if [[ $PWD == $spath/**/* ]]; then
            package=`echo $PWD | perl -e 'while(<>){s/(.*)\/org\///;s/\//\./g;s/\.java//;print;}'`
            break
        fi
    done
    if [ "$package" = "" ]; then
        echo `basename $PWD`
    else
        echo $package
    fi
}

function cl() {
    cd "$1" && ls
}

function fjar() {
    p=$1; shift
    #for f in $*; do jar tf $f | while read en; do egrep -q "$p"<<<"$en" && echo "$f $en"; done; done
    for f in $*; do unzip -l $f | while read en; do egrep -q "$p"<<<"$en" && echo "$f $en"; done; done
}

function fj() {
    local file=`find $CWS/src -name $1.java`
    echo $file
}

function cdj() {
    local file=`find $CWS/src -name $1.java`
    cd `dirname $0`
}

function vij() {
    local file="`find $CWS/src -name $1.java | head -1`"
    if [ "$file" ]; then
        cmd=vim
        if [ "$DISPLAY" ]; then
            #cmd=gvim
            cmd=vim
        fi
        if [ "`$cmd --serverlist 2>/dev/null`" ]; then
            $cmd --remote $file
        else
            $cmd $file
        fi
    else
        echo "$1 not found"
    fi
}

function gitaddmod() {
    git status | grep modified | awk '{print $3}' | xargs git add
}

function greps() {
    find $CWS/src -type f -not -name \.\* -exec egrep -li "$1" {} \;
}

function xgreps() {
    find $CWS/src -type f -not -name \.\* -exec egrep -li "$1" {} \; | while read f; do echo -e "\033[1;33m$f\033[0m"; grep -hi --color=always "$1" $f ; done | less -FRX
}

function xdgreps() {
    find . -type f -not -name \.\* -exec egrep -li "$1" {} \; | while read f; do echo -e "\033[1;33m$f\033[0m"; grep -hi --color=always "$1" $f ; done | less -FRX
}

function dgreps() {
    find . -name \*.java -exec egrep -li "$1" {} \;
}

function jpkgs() {
    find . -name \*.java | xargs grep -h '^package' | cut -c 9- | sort -u | sed 's/;//'
}

function jcls() {
    find src -type d | while read d; do test "`find $d -maxdepth 1 -type f -name \*.java`" && echo -e "\033[1;33m$d\033[0m" && ls $d/*.java; done
}

function hextime() {
    local t="$1"
    [ -z "$t" ] && t=`date +%s`000
    dc<<<"$t 16 o p"
}
